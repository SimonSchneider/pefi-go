<!DOCTYPE html>
<html lang="en">
<head>
    {{ template "head.gohtml" "Chores Settings" }}
    <script src="/static/public/echarts.min.js"></script>
</head>
<body>
<header>
</header>
<main>
    <div id="main" style="width: 100%; height:900px;"></div>
    <script>
        const myChart = echarts.init(document.getElementById('main'), null, {
            // renderer: 'svg'
        });
        window.addEventListener('resize', function () {
            myChart.resize();
        });
        const batchInterval = 100;

        const series = {};

        myChart.setOption({
            legend: {
                data: [],
                selectedMode: 'multiple',
                type: 'scroll',
                orient: 'vertical',
                top: 20,
                right: 10,
            },
            grid: {
                containLabel: true
            },
            animationDurationUpdate: batchInterval,
            tooltip: {
                order: 'valueDesc',
                trigger: 'axis',
                valueFormatter: (value) => `${value.toLocaleString('en-us', {maximumFractionDigits: 0})} kr`,
            },
            xAxis: {
                type: 'time',
                name: 'Date',
                nameLocation: 'middle',
                nameGap: 30,
            },
            yAxis: {
                type: 'value',
                name: 'Balance',
                nameLocation: 'middle',
                nameGap: 100,
                axisLabel: {formatter: '{value} kr'},
            },
            dataZoom: [
                {
                    type: 'inside',   // Enables zooming with mouse wheel and drag
                    xAxisIndex: 0     // Applies to first xAxis
                },
                {
                    type: 'slider',   // Optional: visible slider below the chart
                    xAxisIndex: 0
                }
            ],
            series: [
                {
                    name: 'Today',
                    type: 'line',
                    markLine: {
                        symbol: ['none', 'none'],
                        data: [
                            {
                                xAxis: new Date(),
                                lineStyle: {
                                    color: '#ff0000',
                                    type: 'dashed',
                                },
                                label: {
                                    formatter: 'Today',
                                    color: '#ff0000',
                                }
                            }
                        ]
                    }
                }
            ]
        });

        myChart.on('legendselectchanged', function (params) {
            Object.values(series).forEach(v => {
                myChart.dispatchAction({
                    type: params.selected[v.group] ? 'legendSelect' : 'legendUnSelect',
                    name: v.name
                });
            })
        });

        const addPointToSeries = (seriesName, day, balance) => (series[seriesName].data || []).push([day, balance]);
        const addDataPoint = (dp) => {
            addPointToSeries(dp.id, dp.day, dp.balance);
            addPointToSeries(`${dp.id}_min`, dp.day, dp.lowerBound);
            addPointToSeries(`${dp.id}_max`, dp.day, dp.upperBound - dp.lowerBound);
        }
        const runUpdateBatch = () => myChart.setOption({series: Object.values(series)});
        const intervalUpdate = setInterval(runUpdateBatch, batchInterval);

        const addSeries = (data) => {
            series[data.id] = {
                name: data.id,
                type: 'line',
                data: [],
                showSymbol: false,
                smooth: false,
                group: data.id,
            }
            series[`${data.id}_min`] = {
                name: `${data.id} Min`,
                type: 'line',
                data: [],
                lineStyle: {opacity: 0},
                stack: `${data.id}-confidence-band`,
                showSymbol: false,
                smooth: false,
                group: data.id,
                label: {
                    show: false,
                }
            }
            series[`${data.id}_max`] = {
                name: `${data.id} Max`,
                type: 'line',
                data: [],
                lineStyle: {opacity: 0},
                stack: `${data.id}-confidence-band`,
                showSymbol: false,
                smooth: false,
                group: data.id,
                areaStyle: {
                    color: '#ccc'
                },
                label: {
                    show: false,
                }
            }
        }

        const evtSource = new EventSource('/charts/stream');
        evtSource.addEventListener('setup', (event) => {
            const data = JSON.parse(event.data);
            data.entities.forEach(e => {
                addSeries(e);
                e.snapshots.forEach(s => addDataPoint(s));
            })
            myChart.setOption({
                legend: {
                    data: [...new Set(Object.values(series).map(v => v.group))],
                },
                xAxis: {max: JSON.parse(event.data).max},
                series: Object.values(series),
            })
        });

        evtSource.addEventListener('balanceSnapshot', (event) => addDataPoint(JSON.parse(event.data)));
        evtSource.addEventListener('close', (event) => {
            evtSource.close();
            clearInterval(intervalUpdate);
            runUpdateBatch();
        });
    </script>
</main>
</body>
</html>

