// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package pdb

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO account
    (id, name, type, owner_id, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?) RETURNING id, name, type, owner_id, created_at, updated_at
`

type CreateAccountParams struct {
	ID        string
	Name      string
	Type      string
	OwnerID   sql.NullString
	CreatedAt int64
	UpdatedAt int64
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.ID,
		arg.Name,
		arg.Type,
		arg.OwnerID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO user
    (id, name, created_at, updated_at)
VALUES (?, ?, ?, ?) RETURNING id, name, created_at, updated_at
`

type CreateUserParams struct {
	ID        string
	Name      string
	CreatedAt int64
	UpdatedAt int64
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :one
DELETE
FROM account
WHERE id = ? RETURNING id, name, type, owner_id, created_at, updated_at
`

func (q *Queries) DeleteAccount(ctx context.Context, id string) (Account, error) {
	row := q.db.QueryRowContext(ctx, deleteAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE
FROM user
WHERE id = ? RETURNING id, name, created_at, updated_at
`

func (q *Queries) DeleteUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT id, name, type, owner_id, created_at, updated_at
FROM account
WHERE id = ?
`

func (q *Queries) GetAccount(ctx context.Context, id string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, created_at, updated_at
FROM user
WHERE id = ?
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, name, type, owner_id, created_at, updated_at
FROM account
ORDER BY name, id
`

func (q *Queries) ListAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, created_at, updated_at
FROM user
ORDER BY name, id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE account
SET name       = ?,
    type       = ?,
    owner_id   = ?,
    updated_at = ?
WHERE id = ? RETURNING id, name, type, owner_id, created_at, updated_at
`

type UpdateAccountParams struct {
	Name      string
	Type      string
	OwnerID   sql.NullString
	UpdatedAt int64
	ID        string
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount,
		arg.Name,
		arg.Type,
		arg.OwnerID,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE user
SET name       = ?,
    updated_at = ?
WHERE id = ? RETURNING id, name, created_at, updated_at
`

type UpdateUserParams struct {
	Name      string
	UpdatedAt int64
	ID        string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.Name, arg.UpdatedAt, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
