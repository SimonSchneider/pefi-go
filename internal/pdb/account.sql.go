// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: account.sql

package pdb

import (
	"context"
	"strings"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO account
(id, name, balance_upper_limit, cash_flow_frequency, cash_flow_destination_id, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING id, name, owner_id, created_at, updated_at, balance_upper_limit, cash_flow_frequency, cash_flow_destination_id, type_id
`

type CreateAccountParams struct {
	ID                    string
	Name                  string
	BalanceUpperLimit     *float64
	CashFlowFrequency     *string
	CashFlowDestinationID *string
	CreatedAt             int64
	UpdatedAt             int64
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.ID,
		arg.Name,
		arg.BalanceUpperLimit,
		arg.CashFlowFrequency,
		arg.CashFlowDestinationID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BalanceUpperLimit,
		&i.CashFlowFrequency,
		&i.CashFlowDestinationID,
		&i.TypeID,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :one
DELETE
FROM account
WHERE id = ?
RETURNING id, name, owner_id, created_at, updated_at, balance_upper_limit, cash_flow_frequency, cash_flow_destination_id, type_id
`

func (q *Queries) DeleteAccount(ctx context.Context, id string) (Account, error) {
	row := q.db.QueryRowContext(ctx, deleteAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BalanceUpperLimit,
		&i.CashFlowFrequency,
		&i.CashFlowDestinationID,
		&i.TypeID,
	)
	return i, err
}

const deleteAccountType = `-- name: DeleteAccountType :exec
DELETE
FROM account_type
WHERE id = ?
`

func (q *Queries) DeleteAccountType(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteAccountType, id)
	return err
}

const deleteGrowthModel = `-- name: DeleteGrowthModel :exec
DELETE
FROM growth_model
WHERE id = ?
`

func (q *Queries) DeleteGrowthModel(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteGrowthModel, id)
	return err
}

const deleteSnapshot = `-- name: DeleteSnapshot :exec
DELETE
FROM account_snapshot
WHERE account_id = ?
  AND date = ?
`

type DeleteSnapshotParams struct {
	AccountID string
	Date      int64
}

func (q *Queries) DeleteSnapshot(ctx context.Context, arg DeleteSnapshotParams) error {
	_, err := q.db.ExecContext(ctx, deleteSnapshot, arg.AccountID, arg.Date)
	return err
}

const deleteTransferTemplate = `-- name: DeleteTransferTemplate :exec
DELETE
FROM transfer_template
WHERE id = ?
`

func (q *Queries) DeleteTransferTemplate(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTransferTemplate, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, name, owner_id, created_at, updated_at, balance_upper_limit, cash_flow_frequency, cash_flow_destination_id, type_id
FROM account
WHERE id = ?
`

func (q *Queries) GetAccount(ctx context.Context, id string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BalanceUpperLimit,
		&i.CashFlowFrequency,
		&i.CashFlowDestinationID,
		&i.TypeID,
	)
	return i, err
}

const getAccountType = `-- name: GetAccountType :one
SELECT id, name
FROM account_type
WHERE id = ?
`

func (q *Queries) GetAccountType(ctx context.Context, id string) (AccountType, error) {
	row := q.db.QueryRowContext(ctx, getAccountType, id)
	var i AccountType
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getGrowthModel = `-- name: GetGrowthModel :one
SELECT id, account_id, model_type, annual_growth_rate, annual_volatility, start_date, end_date, created_at, updated_at
FROM growth_model
WHERE id = ?
`

func (q *Queries) GetGrowthModel(ctx context.Context, id string) (GrowthModel, error) {
	row := q.db.QueryRowContext(ctx, getGrowthModel, id)
	var i GrowthModel
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.ModelType,
		&i.AnnualGrowthRate,
		&i.AnnualVolatility,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGrowthModelsByAccount = `-- name: GetGrowthModelsByAccount :many
SELECT id, account_id, model_type, annual_growth_rate, annual_volatility, start_date, end_date, created_at, updated_at
FROM growth_model
WHERE account_id = ?
`

func (q *Queries) GetGrowthModelsByAccount(ctx context.Context, accountID string) ([]GrowthModel, error) {
	rows, err := q.db.QueryContext(ctx, getGrowthModelsByAccount, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GrowthModel
	for rows.Next() {
		var i GrowthModel
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.ModelType,
			&i.AnnualGrowthRate,
			&i.AnnualVolatility,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSnapshot = `-- name: GetSnapshot :one
SELECT account_id, date, balance
FROM account_snapshot
WHERE account_id = ?
  AND date = ?
`

type GetSnapshotParams struct {
	AccountID string
	Date      int64
}

func (q *Queries) GetSnapshot(ctx context.Context, arg GetSnapshotParams) (AccountSnapshot, error) {
	row := q.db.QueryRowContext(ctx, getSnapshot, arg.AccountID, arg.Date)
	var i AccountSnapshot
	err := row.Scan(&i.AccountID, &i.Date, &i.Balance)
	return i, err
}

const getSnapshotsByAccount = `-- name: GetSnapshotsByAccount :many
SELECT account_id, date, balance
FROM account_snapshot
WHERE account_id = ?
`

func (q *Queries) GetSnapshotsByAccount(ctx context.Context, accountID string) ([]AccountSnapshot, error) {
	rows, err := q.db.QueryContext(ctx, getSnapshotsByAccount, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountSnapshot
	for rows.Next() {
		var i AccountSnapshot
		if err := rows.Scan(&i.AccountID, &i.Date, &i.Balance); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSnapshotsByAccounts = `-- name: GetSnapshotsByAccounts :many
SELECT account_id, date, balance
FROM account_snapshot
WHERE account_id IN (/*SLICE:ids*/?)
ORDER BY date, account_id
`

func (q *Queries) GetSnapshotsByAccounts(ctx context.Context, ids []string) ([]AccountSnapshot, error) {
	query := getSnapshotsByAccounts
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountSnapshot
	for rows.Next() {
		var i AccountSnapshot
		if err := rows.Scan(&i.AccountID, &i.Date, &i.Balance); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransferTemplate = `-- name: GetTransferTemplate :one
SELECT id, name, from_account_id, to_account_id, amount_type, amount_fixed, amount_percent, priority, recurrence, start_date, end_date, enabled, created_at, updated_at
FROM transfer_template
WHERE id = ?
`

func (q *Queries) GetTransferTemplate(ctx context.Context, id string) (TransferTemplate, error) {
	row := q.db.QueryRowContext(ctx, getTransferTemplate, id)
	var i TransferTemplate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.AmountType,
		&i.AmountFixed,
		&i.AmountPercent,
		&i.Priority,
		&i.Recurrence,
		&i.StartDate,
		&i.EndDate,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransferTemplates = `-- name: GetTransferTemplates :many
SELECT id, name, from_account_id, to_account_id, amount_type, amount_fixed, amount_percent, priority, recurrence, start_date, end_date, enabled, created_at, updated_at
FROM transfer_template
ORDER BY recurrence, priority, name, start_date, end_date, created_at
`

func (q *Queries) GetTransferTemplates(ctx context.Context) ([]TransferTemplate, error) {
	rows, err := q.db.QueryContext(ctx, getTransferTemplates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TransferTemplate
	for rows.Next() {
		var i TransferTemplate
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.AmountType,
			&i.AmountFixed,
			&i.AmountPercent,
			&i.Priority,
			&i.Recurrence,
			&i.StartDate,
			&i.EndDate,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAccountTypes = `-- name: ListAccountTypes :many
SELECT id, name
FROM account_type
ORDER BY name, id
`

func (q *Queries) ListAccountTypes(ctx context.Context) ([]AccountType, error) {
	rows, err := q.db.QueryContext(ctx, listAccountTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountType
	for rows.Next() {
		var i AccountType
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, name, owner_id, created_at, updated_at, balance_upper_limit, cash_flow_frequency, cash_flow_destination_id, type_id
FROM account
ORDER BY name, id
`

func (q *Queries) ListAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.BalanceUpperLimit,
			&i.CashFlowFrequency,
			&i.CashFlowDestinationID,
			&i.TypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listActiveGrowthModels = `-- name: ListActiveGrowthModels :many
SELECT id, account_id, model_type, annual_growth_rate, annual_volatility, start_date, end_date, created_at, updated_at
FROM growth_model
WHERE end_date IS NULL OR end_date > ?1 AND start_date <= ?1
`

func (q *Queries) ListActiveGrowthModels(ctx context.Context, param1 *int64) ([]GrowthModel, error) {
	rows, err := q.db.QueryContext(ctx, listActiveGrowthModels, param1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GrowthModel
	for rows.Next() {
		var i GrowthModel
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.ModelType,
			&i.AnnualGrowthRate,
			&i.AnnualVolatility,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLatestSnapshotPerAccount = `-- name: ListLatestSnapshotPerAccount :many
SELECT s.account_id, s.date, s.balance
FROM account_snapshot s
INNER JOIN (
    SELECT account_id, MAX(date) AS max_date
    FROM account_snapshot
    GROUP BY account_id
) latest
ON s.account_id = latest.account_id AND s.date = latest.max_date
`

func (q *Queries) ListLatestSnapshotPerAccount(ctx context.Context) ([]AccountSnapshot, error) {
	rows, err := q.db.QueryContext(ctx, listLatestSnapshotPerAccount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountSnapshot
	for rows.Next() {
		var i AccountSnapshot
		if err := rows.Scan(&i.AccountID, &i.Date, &i.Balance); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE account
SET name                     = ?,
    updated_at               = ?,
    balance_upper_limit      = ?,
    cash_flow_frequency      = ?,
    cash_flow_destination_id = ?
WHERE id = ?
RETURNING id, name, owner_id, created_at, updated_at, balance_upper_limit, cash_flow_frequency, cash_flow_destination_id, type_id
`

type UpdateAccountParams struct {
	Name                  string
	UpdatedAt             int64
	BalanceUpperLimit     *float64
	CashFlowFrequency     *string
	CashFlowDestinationID *string
	ID                    string
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount,
		arg.Name,
		arg.UpdatedAt,
		arg.BalanceUpperLimit,
		arg.CashFlowFrequency,
		arg.CashFlowDestinationID,
		arg.ID,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BalanceUpperLimit,
		&i.CashFlowFrequency,
		&i.CashFlowDestinationID,
		&i.TypeID,
	)
	return i, err
}

const updateSnapshotDate = `-- name: UpdateSnapshotDate :many
UPDATE account_snapshot
SET date = ?
WHERE date = ?
RETURNING account_id, date, balance
`

type UpdateSnapshotDateParams struct {
	Date   int64
	Date_2 int64
}

func (q *Queries) UpdateSnapshotDate(ctx context.Context, arg UpdateSnapshotDateParams) ([]AccountSnapshot, error) {
	rows, err := q.db.QueryContext(ctx, updateSnapshotDate, arg.Date, arg.Date_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountSnapshot
	for rows.Next() {
		var i AccountSnapshot
		if err := rows.Scan(&i.AccountID, &i.Date, &i.Balance); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertAccountType = `-- name: UpsertAccountType :one
INSERT OR
REPLACE
INTO account_type
(id, name)
VALUES (?, ?)
RETURNING id, name
`

type UpsertAccountTypeParams struct {
	ID   string
	Name string
}

func (q *Queries) UpsertAccountType(ctx context.Context, arg UpsertAccountTypeParams) (AccountType, error) {
	row := q.db.QueryRowContext(ctx, upsertAccountType, arg.ID, arg.Name)
	var i AccountType
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const upsertGrowthModel = `-- name: UpsertGrowthModel :one
INSERT OR
REPLACE
INTO growth_model
(id, account_id, model_type, annual_growth_rate, annual_volatility, start_date, end_date, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id, account_id, model_type, annual_growth_rate, annual_volatility, start_date, end_date, created_at, updated_at
`

type UpsertGrowthModelParams struct {
	ID               string
	AccountID        string
	ModelType        string
	AnnualGrowthRate string
	AnnualVolatility string
	StartDate        int64
	EndDate          *int64
	CreatedAt        int64
	UpdatedAt        int64
}

func (q *Queries) UpsertGrowthModel(ctx context.Context, arg UpsertGrowthModelParams) (GrowthModel, error) {
	row := q.db.QueryRowContext(ctx, upsertGrowthModel,
		arg.ID,
		arg.AccountID,
		arg.ModelType,
		arg.AnnualGrowthRate,
		arg.AnnualVolatility,
		arg.StartDate,
		arg.EndDate,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i GrowthModel
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.ModelType,
		&i.AnnualGrowthRate,
		&i.AnnualVolatility,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertSnapshot = `-- name: UpsertSnapshot :one
INSERT OR
REPLACE
INTO account_snapshot
    (account_id, date, balance)
VALUES (?, ?, ?)
RETURNING account_id, date, balance
`

type UpsertSnapshotParams struct {
	AccountID string
	Date      int64
	Balance   string
}

func (q *Queries) UpsertSnapshot(ctx context.Context, arg UpsertSnapshotParams) (AccountSnapshot, error) {
	row := q.db.QueryRowContext(ctx, upsertSnapshot, arg.AccountID, arg.Date, arg.Balance)
	var i AccountSnapshot
	err := row.Scan(&i.AccountID, &i.Date, &i.Balance)
	return i, err
}

const upsertTransferTemplate = `-- name: UpsertTransferTemplate :one
INSERT OR
REPLACE
INTO transfer_template
(id, name, from_account_id, to_account_id, amount_type, amount_fixed, amount_percent, priority, recurrence, start_date,
 end_date, enabled, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id, name, from_account_id, to_account_id, amount_type, amount_fixed, amount_percent, priority, recurrence, start_date, end_date, enabled, created_at, updated_at
`

type UpsertTransferTemplateParams struct {
	ID            string
	Name          string
	FromAccountID *string
	ToAccountID   *string
	AmountType    string
	AmountFixed   string
	AmountPercent float64
	Priority      int64
	Recurrence    string
	StartDate     int64
	EndDate       *int64
	Enabled       bool
	CreatedAt     int64
	UpdatedAt     int64
}

func (q *Queries) UpsertTransferTemplate(ctx context.Context, arg UpsertTransferTemplateParams) (TransferTemplate, error) {
	row := q.db.QueryRowContext(ctx, upsertTransferTemplate,
		arg.ID,
		arg.Name,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.AmountType,
		arg.AmountFixed,
		arg.AmountPercent,
		arg.Priority,
		arg.Recurrence,
		arg.StartDate,
		arg.EndDate,
		arg.Enabled,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i TransferTemplate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.AmountType,
		&i.AmountFixed,
		&i.AmountPercent,
		&i.Priority,
		&i.Recurrence,
		&i.StartDate,
		&i.EndDate,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
