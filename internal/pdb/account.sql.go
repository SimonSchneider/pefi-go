// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: account.sql

package pdb

import (
	"context"
	"strings"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO account
    (id, name, created_at, updated_at)
VALUES (?, ?, ?, ?)
RETURNING id, name, owner_id, created_at, updated_at
`

type CreateAccountParams struct {
	ID        string
	Name      string
	CreatedAt int64
	UpdatedAt int64
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.ID,
		arg.Name,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :one
DELETE
FROM account
WHERE id = ?
RETURNING id, name, owner_id, created_at, updated_at
`

func (q *Queries) DeleteAccount(ctx context.Context, id string) (Account, error) {
	row := q.db.QueryRowContext(ctx, deleteAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSnapshot = `-- name: DeleteSnapshot :exec
DELETE
FROM account_snapshot
WHERE account_id = ?
  AND date = ?
`

type DeleteSnapshotParams struct {
	AccountID string
	Date      int64
}

func (q *Queries) DeleteSnapshot(ctx context.Context, arg DeleteSnapshotParams) error {
	_, err := q.db.ExecContext(ctx, deleteSnapshot, arg.AccountID, arg.Date)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, name, owner_id, created_at, updated_at
FROM account
WHERE id = ?
`

func (q *Queries) GetAccount(ctx context.Context, id string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSnapshot = `-- name: GetSnapshot :one
SELECT account_id, date, balance
FROM account_snapshot
WHERE account_id = ?
  AND date = ?
`

type GetSnapshotParams struct {
	AccountID string
	Date      int64
}

func (q *Queries) GetSnapshot(ctx context.Context, arg GetSnapshotParams) (AccountSnapshot, error) {
	row := q.db.QueryRowContext(ctx, getSnapshot, arg.AccountID, arg.Date)
	var i AccountSnapshot
	err := row.Scan(&i.AccountID, &i.Date, &i.Balance)
	return i, err
}

const getSnapshotsByAccount = `-- name: GetSnapshotsByAccount :many
SELECT account_id, date, balance
FROM account_snapshot
WHERE account_id = ?
`

func (q *Queries) GetSnapshotsByAccount(ctx context.Context, accountID string) ([]AccountSnapshot, error) {
	rows, err := q.db.QueryContext(ctx, getSnapshotsByAccount, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountSnapshot
	for rows.Next() {
		var i AccountSnapshot
		if err := rows.Scan(&i.AccountID, &i.Date, &i.Balance); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSnapshotsByAccounts = `-- name: GetSnapshotsByAccounts :many
SELECT account_id, date, balance
FROM account_snapshot
WHERE account_id IN (/*SLICE:ids*/?)
ORDER BY date, account_id
`

func (q *Queries) GetSnapshotsByAccounts(ctx context.Context, ids []string) ([]AccountSnapshot, error) {
	query := getSnapshotsByAccounts
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountSnapshot
	for rows.Next() {
		var i AccountSnapshot
		if err := rows.Scan(&i.AccountID, &i.Date, &i.Balance); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, name, owner_id, created_at, updated_at
FROM account
ORDER BY name, id
`

func (q *Queries) ListAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE account
SET name       = ?,
    updated_at = ?
WHERE id = ?
RETURNING id, name, owner_id, created_at, updated_at
`

type UpdateAccountParams struct {
	Name      string
	UpdatedAt int64
	ID        string
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount, arg.Name, arg.UpdatedAt, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertSnapshot = `-- name: UpsertSnapshot :one
INSERT OR
REPLACE
INTO account_snapshot
    (account_id, date, balance)
VALUES (?, ?, ?)
RETURNING account_id, date, balance
`

type UpsertSnapshotParams struct {
	AccountID string
	Date      int64
	Balance   float64
}

func (q *Queries) UpsertSnapshot(ctx context.Context, arg UpsertSnapshotParams) (AccountSnapshot, error) {
	row := q.db.QueryRowContext(ctx, upsertSnapshot, arg.AccountID, arg.Date, arg.Balance)
	var i AccountSnapshot
	err := row.Scan(&i.AccountID, &i.Date, &i.Balance)
	return i, err
}
