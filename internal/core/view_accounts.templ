package core;

import (
	"strconv"

	"github.com/SimonSchneider/pefigo/internal/ui"
)

templ PageAccounts(view *AccountsView) {
	@Layout("/accounts", AccountsContent(view))
}

templ PageEditAccount(view *AccountEditView2) {
	@Layout("/accounts", EditAccountContent(view))
}

templ EditAccountContent(view *AccountEditView2) {
	<main class="flex-1 flex flex-col">
		if view.IsEdit() {
			@Header("Edit Account", DeleteAccountButton(view.Account.ID))
		} else {
			@Header("New Account", NewAccountButton())
		}
		@AccountForm(view)
	</main>
}

templ DeleteAccountButton(id string) {
	<form method="post" action={ "/accounts/" + id + "/delete?next=" + templ.EscapeString("/accounts") }>
		<button class="btn btn-error" type="submit">
			Delete
		</button>
	</form>
}

templ AccountForm(view *AccountEditView2) {
	{{ balanceUpperLimit := "" }}
	if view.Account.BalanceUpperLimit != nil {
		{{ balanceUpperLimit = strconv.FormatFloat(*view.Account.BalanceUpperLimit, 'f', -1, 64) }}
	}
	<div class="flex flex-col lg:flex-row gap-6 m-6">
		<!-- Account Details Box -->
		<div class="flex-1">
			<form action={ "/accounts/?next=" + templ.EscapeString("/accounts") } method="post">
				<fieldset class="fieldset bg-base-200 border-base-300 rounded-box border p-4">
					<legend class="fieldset-legend">Account details</legend>
					<input type="hidden" name="id" value={ view.Account.ID }/>
					<label class="label">Name</label>
					<input type="text" class="input" placeholder="Checking" name="name" value={ view.Account.Name }/>
					<label class="label">Balance upper limit</label>
					<input type="number" class="input" placeholder="1000" name="balance_upper_limit" value={ balanceUpperLimit }/>
					<label class="label">Cash flow frequency</label>
					<input type="text" class="input" placeholder="Name" name="cash_flow_frequency" value={ view.Account.CashFlowFrequency }/>
					<label class="label">Cash flow destination</label>
					<select class="select" name="cash_flow_destination_id">
						<option
							value=""
							if view.Account.CashFlowDestinationID == "" {
								selected
							}
						>Select a destination</option>
						for _, acc := range view.Accounts {
							<option
								value={ acc.ID }
								if acc.ID == view.Account.CashFlowDestinationID {
									selected
								}
							>{ acc.Name }</option>
						}
					</select>
					@SaveButton(view.IsEdit())
				</fieldset>
			</form>
		</div>
		if view.IsEdit() {
			<!-- Growth Models Box -->
			for _, growthModel := range view.GrowthModels {
				<form id={ "delete-form-" + growthModel.ID } action={ "/growth-models/" + growthModel.ID + "/delete?next=" + templ.EscapeString("/accounts/"+view.Account.ID+"/edit") } method="post"></form>
			}
			<div class="flex-1">
				<fieldset class="fieldset bg-base-200 border-base-300 rounded-box w-full border p-4">
					<legend class="fieldset-legend">Growth Models</legend>
					<div class="space-y-3">
						for _, growthModel := range view.GrowthModels {
							@GrowthModelForm(view.Account.ID, growthModel)
						}
						@GrowthModelForm(view.Account.ID, GrowthModel{})
					</div>
				</fieldset>
			</div>
		}
	</div>
}

templ GrowthModelForm(accountID string, growthModel GrowthModel) {
	{{ endDate := "" }}
	if growthModel.ID != "" && growthModel.EndDate != nil {
		{{ endDate = growthModel.EndDate.String() }}
	}
	<form method="post" action={ "/growth-models/?next=" + templ.EscapeString("/accounts/"+accountID+"/edit") }>
		<div class="bg-base-100 rounded-lg border border-base-300 p-3 relative">
			if growthModel.ID != "" {
				<button type="submit" form={ "delete-form-" + growthModel.ID } class="btn btn-circle btn-xs btn-error absolute -top-2 -right-2 shadow-sm">
					@IconX("w-3 h-3")
				</button>
			}
			<input type="hidden" name="id" value={ growthModel.ID }/>
			<input type="hidden" name="account_id" value={ accountID }/>
			<div class="flex flex-col gap-2">
				<div class="flex flex-row gap-2">
					<div class="form-control flex-1">
						<label class="label label-text text-xs pb-1">Type</label>
						<select class="select select-sm w-full" name="type">
							<option
								value="fixed"
								if growthModel.Type == "fixed" {
									selected
								}
							>Fixed</option>
							<option
								value="lognormal"
								if growthModel.Type == "lognormal" {
									selected
								}
							>Lognormal</option>
						</select>
					</div>
					<div class="form-control flex-1">
						<label class="label label-text text-xs pb-1">Annual Rate</label>
						<input type="text" class="input input-sm w-full" placeholder="Rate" name="annual_rate" value={ growthModel.AnnualRate.SimpleEncode() }/>
					</div>
					<div class="form-control flex-1">
						<label class="label label-text text-xs pb-1">Annual Volatility</label>
						<input type="text" class="input input-sm w-full" placeholder="Volatility" name="annual_volatility" value={ growthModel.AnnualVolatility.SimpleEncode() }/>
					</div>
				</div>
				<div class="flex flex-row gap-2">
					<div class="form-control flex-1">
						<label class="label label-text text-xs pb-1">Start Date</label>
						<input type="text" class="input input-sm w-full" placeholder="Start" name="start_date" value={ growthModel.StartDate.String() }/>
					</div>
					<div class="form-control flex-2">
						<label class="label label-text text-xs pb-1">End Date</label>
						<input type="text" class="input input-sm w-full" placeholder="End" name="end_date" value={ endDate }/>
					</div>
					<div class="flex items-end">
						@SaveButton(growthModel.ID != "")
					</div>
				</div>
			</div>
		</div>
	</form>
}

templ AccountsStatCardRow(view *AccountsView) {
	<div class="flex flex-row flex-wrap gap-4">
		@StatCard("Total Balance", ui.FormatWithThousands(view.TotalBalance), "Total balance of all accounts", IconTrendingUp("w-10 h-10 text-green-600"))
		@StatCard("Total Accounts", strconv.Itoa(len(view.Accounts)), "number of accounts", IconCashBanknote("w-10 h-10"))
		@StatCard("Assets", ui.FormatWithThousands(view.TotalAssets), "Total assets", IconTrendingUp("w-10 h-10 text-green-600"))
		@StatCard("Liabilities", ui.FormatWithThousands(-view.TotalLiabilities), "Total liabilities", IconTrendingDown("w-10 h-10 text-red-600"))
	</div>
}

templ AccountTableRow(account *AccountDetailed) {
	<tr class="hover:bg-base-50">
		<td class="font-medium">{ account.Name }</td>
		<td>
			<span class="text-base-content/50"></span>
		</td>
		<td class="text-right">
			if account.LastSnapshot != nil {
				@BalanceBadge(account.LastSnapshot.Balance.Mean(), true, "")
			} else {
				<span>-</span>
			}
		</td>
		<td>
			if account.LastSnapshot != nil {
				<span>{ account.LastSnapshot.Date.String() }</span>
			} else {
				<span>-</span>
			}
		</td>
		<td>
			if account.GrowthModel != nil {
				<span
					class={ "badge",
					templ.KV("badge-primary", account.GrowthModel.Type == "fixed"),
					templ.KV("badge-secondary", account.GrowthModel.Type == "lognormal") }
				>{ account.GrowthModel.Type }</span>
			} else {
				<span class="text-base-content/50"></span>
			}
		</td>
		<td>
			if account.GrowthModel != nil {
				if account.GrowthModel.AnnualRate.IsFixed() {
					<span>{ account.GrowthModel.AnnualRate.Mean() }</span>
				} else {
					<span>~ { account.GrowthModel.AnnualRate.Mean() }</span>
				}
			} else {
				<span class="text-base-content/50"></span>
			}
		</td>
		<td class="text-right">
			<div class="flex items-center justify-end gap-2">
				<a class="btn btn-ghost btn-sm" title="Edit" href={ "/accounts/" + account.ID + "/edit" }>
					@IconPencil("w-4 h-4")
				</a>
			</div>
		</td>
	</tr>
}

templ NewAccountButton() {
	{{ label := "New Account" }}
	<a class="btn btn-primary" href="/accounts/new" title={ label }>
		{ label }
		@IconPlus("w-4 h-4")
	</a>
}

templ AccountsContent(view *AccountsView) {
	<main class="flex-1 flex flex-col">
		@Header("Accounts", NewAccountButton())
		<div class="flex-1 p-6 overflow-auto bg-base-50">
			<div class="flex flex-col gap-4">
				@AccountsStatCardRow(view)
				<div class="card bg-base-100 shadow-sm border border-base-300">
					<div class="card-body">
						<div class="overflow-x-auto">
							<table class="table w-full">
								<thead>
									<tr>
										<th class="font-semibold sticky">Name</th>
										<th class="font-semibold">Type</th>
										<th class="font-semibold text-right">Balance</th>
										<th class="font-semibold">Last Snapshot</th>
										<th class="font-semibold">Growth Model</th>
										<th class="font-semibold">Growth Rate</th>
										<th class="font-semibold text-right sticky">Actions</th>
									</tr>
								</thead>
								<tbody>
									if len(view.Accounts) == 0 {
										<tr>
											<td colspan="6" class="text-center py-8 text-base-content/70">
												<div class="flex flex-col items-center gap-2">
													<svg class="w-12 h-12 text-base-content/30" fill="none" stroke="currentColor" viewBox="0 0 24 24">
														<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 003 3v8a3 3 0 003 3z"></path>
													</svg>
													<p class="text-lg font-medium">No accounts yet</p>
													<p>Create your first account to get started</p>
												</div>
											</td>
										</tr>
									} else {
										for _, account := range view.Accounts {
											@AccountTableRow(&account)
										}
									}
								</tbody>
							</table>
						</div>
					</div>
				</div>
			</div>
		</div>
	</main>
}
