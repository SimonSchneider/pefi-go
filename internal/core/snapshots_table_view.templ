package core

import "github.com/SimonSchneider/goslu/date"

templ PageSnapshotsTable(view *SnapshotsTableView) {
	@Layout("/snapshots-table", SnapshotsTableContent(view))
}

templ SnapshotsTableNewRowButton() {
	<button class="btn btn-primary" hx-get="/snapshots-table/empty-row" hx-target="#snapshots-table-body" hx-swap="afterbegin">
		New Row
		@IconPlus("w-4 h-4")
	</button>
}

templ SnapshotsTableContent(view *SnapshotsTableView) {
	<main class="flex-1 flex flex-col overflow-hidden">
		@Header("Snapshots Table", AccountsFilter(view.AccountTypes), SnapshotsTableNewRowButton())
		<div class="flex-1 p-6 bg-base-100 overflow-hidden">
			<div class="bg-base-100 rounded-lg shadow-sm border border-base-200 h-full flex flex-col overflow-hidden max-w-full">
				<div class="flex-1 overflow-auto border border-base-300 rounded-lg">
					<div class="inline-block min-w-full align-middle">
						<div class="overflow-hidden">
							<table class="min-w-full divide-y divide-base-300">
								<thead class="bg-base-200 sticky top-0 z-20">
									<tr>
										<th class="sticky left-0 bg-base-200 z-30 px-3 py-3.5 text-left text-xs font-semibold text-base-content border-r border-base-300 min-w-32">
											Date
										</th>
										for _, account := range view.Accounts {
											<th class="px-3 py-3.5 text-center text-xs font-semibold text-base-content border-r border-base-300 last:border-r-0 min-w-40">
												{ account.Name }
											</th>
										}
									</tr>
								</thead>
								<tbody id="snapshots-table-body" class="divide-y divide-base-200 bg-base-100">
									for _, row := range view.Rows {
										@SnapshotsTableRow(&row)
									}
								</tbody>
							</table>
						</div>
					</div>
				</div>
			</div>
		</div>
	</main>
	<script>
		// Handle Enter key navigation in the snapshots table
		document.addEventListener('keydown', function(event) {
			if (event.key === 'Enter' && event.target.tagName === 'INPUT' && event.target.type === 'text') {
				event.preventDefault();
				
				const currentInput = event.target;
				const currentCell = currentInput.closest('td');
				const currentRow = currentCell.closest('tr');
				const table = currentRow.closest('table');
				const tbody = table.querySelector('tbody');
				
				// Find the next row
				const nextRow = currentRow.nextElementSibling;
				if (!nextRow || !nextRow.classList.contains('hover:bg-base-100')) {
					return; // No next row or not a data row
				}
				
				// Find the same column index in the next row
				const currentCellIndex = Array.from(currentRow.children).indexOf(currentCell);
				const nextCell = nextRow.children[currentCellIndex];
				
				if (nextCell && nextCell.querySelector('input')) {
					const nextInput = nextCell.querySelector('input');
					nextInput.focus();
					nextInput.select(); // Select all text for easy editing
				}
			}
		});
	</script>
}

templ SnapshotsTableRow(row *SnapshotsRow) {
	<tr class="hover:bg-base-100 even:bg-base-100">
		<td class="px-3 py-2 text-sm text-base-content border-r border-base-300 last:border-r-0">
			<input
				type="text"
				class="w-full h-full border-0 bg-transparent text-right font-mono text-sm text-base-content placeholder-base-content focus:outline-none transition-colors px-1 py-0.5"
				value={ row.Date.String() }
				hx-post={ templ.SafeURL("/snapshots-table/modify-date?old-date=" + row.Date.String()) }
				hx-trigger="blur changed"
				hx-target="closest tr"
				hx-swap="outerHTML"
				hx-indicator="this"
				name="new-date"
			/>
		</td>
		for _, snap := range row.Snapshots {
			@SnapshotCell(snap.AccountID, row.Date, snap)
		}
	</tr>
}

templ SnapshotCell(accountID string, date date.Date, snapshot AccountSnapshotCell) {
	<td
		class={
			"px-3 py-2 text-sm text-base-content border-r border-base-300 last:border-r-0",
			templ.KV("bg-base-100 text-base-content", snapshot.Change == BalanceUnchanged),
			templ.KV("bg-success text-success-content", snapshot.Change == BalanceIncreased),
			templ.KV("bg-error text-error-content", snapshot.Change == BalanceDecreased),
		}
	>
		<input
			type="text"
			class="w-full h-full border-0 text-right font-mono text-sm placeholder-gray-400 focus:outline-none transition-colors px-1 py-0.5"
			value={ getSnapshotValue(snapshot.AccountSnapshot) }
			hx-post={ templ.SafeURL("/accounts/" + accountID + "/snapshots/" + date.String() + "/") }
			hx-trigger="blur changed"
			hx-target="closest td"
			hx-swap="outerHTML"
			hx-indicator="this"
			name="balance"
		/>
	</td>
}

func getSnapshotValue(snapshot AccountSnapshot) string {
	if !snapshot.Balance.Valid() {
		return ""
	}
	return snapshot.Balance.SimpleEncode()
}
